[
    { "name": "Always", "usage": "Satisfies the rule with no requirements. Usage: Always();" },
    { "name": "ArenaWins", "usage": "Requires a player to have won a given amount of rounds in the Arena mini-game. Usage: Arena(amount);" },
    { "name": "CheckDaily", "usage": "Checks that a calendar day has passed since the quest state was entered. Usage: CheckDaily();" },
    { "name": "CitizenOf", "usage": "Checks that a player is a citizen of a certain home town. Usage: CitizenOf(Home name);" },
    { "name": "Die", "usage": "Checks if a player has died. Usage: Die() or Die(count);" },
    { "name": "Disconnected", "usage": "Checks if a player has disconnected from the server. Usage: Disconnected();" },
    { "name": "DoneDaily", "usage": "Checks the number of times ResetDaily() has been called within a calendar day. Usage: DoneDaily(amount) goto NextStateName;" },
    { "name": "EnterArea", "usage": "Checks the player has entered a range of tiles. Usage: EnterArea(radius, X coordinate, Y coordinate);" },
    { "name": "EnterCoord", "usage": "Requires a player to stand at a given coordinate to progress to the next state. Usage: EnterCoord(Map ID, X coordinate, Y coordinate);" },
    { "name": "EnterMap", "usage": "Requires a player to enter a specific map to progress to the next state. Usage: EnterMap(Map ID);" },
    { "name": "FinishedQuest", "usage": "Checks the given quest has been completed. Usage: FinishedQuest(QuestID);" },
    { "name": "GotItems", "usage": "Requires an amount of items to progress to the next state. Usage: GotItems(Item ID, amount);" },
    { "name": "GotSpell", "usage": "Requires a player to have learned a spell to progress to the next state. Usage: GotSpell(Spell ID);" },
    { "name": "HasKilled", "usage": "Requires a player to have killed a set amount of a specific NPC. Usage: HasKilled(NPC ID, amount);" },
    { "name": "HasStepped", "usage": "Requires a player to have stepped a set amount of steps. Usage: HasStepped(amount);" },
    { "name": "InputNpc", "usage": "Uses a link value to progress to the next state. Usage: InputNpc(Input ID);" },
    { "name": "IsClass", "usage": "Checks a player has a class ID matching the given ID. Usage: IsClass(ID);" },
    { "name": "IsGender", "usage": "Checks a player's gender ID matches the given ID. Usage: IsGender(ID);" },
    { "name": "IsNamed", "usage": "Checks a player's name matches the given name. Usage: IsNamed(name);" },
    { "name": "IsRace", "usage": "Checks a player's race ID matches the given ID. Usage: IsRace(Race ID);" },
    { "name": "IsWearing", "usage": "Checks a player's equipment matches the given ID. Usage: IsWearing(Item ID);" },
    { "name": "KilledNpcs", "usage": "Requires an amount of NPCs to be killed before progressing to the next state. Usage: KilledNpcs(Npc ID, amount);" },
    { "name": "KilledPlayers", "usage": "Requires an amount of players to be killed before progressing to the next state. Usage: KilledPlayers(amount);" },
    { "name": "LeaveCoord", "usage": "Requires a player to leave a given coordinate to progress to the next state. Usage: LeaveCoord(Map ID, X coordinate, Y coordinate);" },
    { "name": "LeaveMap", "usage": "Requires a player to leave a map to progress to the next state. Usage: LeaveMap(Map ID);" },
    { "name": "LostItems", "usage": "Checks if the player's items become less than needed. Usage: LostItems(Item ID, amount);" },
    { "name": "LostSpell", "usage": "Checks if the player's spells become less than needed. Usage: LostSpell(Spell ID);" },
    { "name": "NotWearing", "usage": "Checks a player's equipment to verify the given item ID is not equipped. Usage: NotWearing(Item ID);" },
    { "name": "PickupFakeItem", "usage": "Displays an item visible only to the player at a given location and checks when the item is picked up. Usage: PickupFakeItem(Map ID, X coordinate, Y coordinate, Item ID, amount);" },
    { "name": "PickupRandomItem", "usage": "Displays an item at random coordinates selected from a random bracket only visible to the player and checks when the item is picked up. Usage: PickupRandomItem(RandomName, Item ID, amount);" },
    { "name": "Stepped", "usage": "Checks the number of steps that a player has walked since entering the quest state. Usage: Stepped(amount);" },
    { "name": "StatBetween", "usage": "Checks if the given stat is within the given range. Usage: StatBetween(Stat, low value, high value);" },
    { "name": "StatGreater", "usage": "Checks if the given stat is greater than the given value. Usage: StatIs(Stat, value);" },
    { "name": "StatIs", "usage": "Checks if the given stat is equal to the given value. Usage: StatIs(Stat, value);" },
    { "name": "StatLess", "usage": "Checks if the given stat is less than the given value. Usage: StatIs(Stat, value);" },
    { "name": "StatNot", "usage": "Checks if the given stat is not equal to the given value. Usage: StatIs(Stat, value);" },
    { "name": "StatRPN", "usage": "Checks if the given RPN expression does not equal zero. Usage: StatRPN(stat, expression);" },
    { "name": "TimeElapsed", "usage": "Checks the number of minutes that have passed since the quest state had been entered. Usage: TimeElapsed(time);" },
    { "name": "Unequipped", "usage": "Checks a player's equipment that nothing is equipped. Usage: Unequipped();" },
    { "name": "UsedItem", "usage": "Requires an amount of an item to be used to progress to the next state. Usage: UsedItem(Item ID, amount);" },
    { "name": "UsedSpell", "usage": "Requires an amount of a spell to be used to progress to the next state. Usage: UsedSpell(Spell ID, amount);" },
    { "name": "TalkedToNpc", "usage": "Requires only that a dialog window with a specific quest NPC be opened to continue to the next state. Usage: TalkedToNpc(Npc Quest ID);" },
    { "name": "WaitMinutes", "usage": "Checks that the given minutes have passed. Usage: WaitMinutes(minutes);" },
    { "name": "WaitSeconds", "usage": "Checks that the given seconds have passed. Usage: WaitSeconds(seconds);" }
]